scalar UUID

# Defines the available queries that clients can use to fetch data
type Query {
    # Fetch a single movie by its unique ID
    movie(id: UUID!): Movie

    # Fetch a list of movies based on optional filters like genre or title
    movies(genre: String, title: String): [Movie]

    # Fetch all reviews written by a specific user
    userReviews(userId: UUID!): [Review]

    # Get personalized movie recommendations for a user
    movieRecommendations(userId: UUID!): [Recommendation]
}

# Defines mutations (operations that modify data)
type Mutation {
    # Add a new review for a movie with a rating and comment
    addReview(userId: UUID!, movieId: UUID!, comment: String!): Review

    # Update an existing review's rating or comment
    updateReview(id: UUID!, rating: Int, comment: String): Review

    # Delete a review by its ID, returning true if successful
    deleteReview(id: UUID!): Boolean
}

# Represents a movie entity
type Movie {
    id: UUID     # Unique identifier for the movie
    genre: String       # Genre of the movie (e.g., Action, Drama)
    title: String       # Title of the movie
    director: String    # Director of the movie
    releaseDate: String # Release date in string format (e.g., YYYY-MM-DD)
}

# Represents a review entity
type Review {
    id: UUID # Unique identifier for the review
    rating: Int     # Rating given to the movie
}

# Represents a user entity
type User {
    id: UUID  # Unique identifier for the user
    username: String # The username of the reviewer
}

# Represents a recommendation entity
type Recommendation {
    id: UUID # Unique identifier for the recommendation
    users: [User]   # The username of the recipient for the recommendation
    movies: [Movie] # The movie that is recommended
    score: Float   # The score attributed to the recommendation
}